// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not16(in=x, out=notx);
    And16(a=x, b=notx, out=zerox);
    Mux16(a=x, b=zerox, sel=zx, out=muxout1);

    Not16(in=muxout1, out=neqzeromuxout1);
    Mux16(a=muxout1, b=neqzeromuxout1, sel=nx, out=muxout2);

    Not16(in=y, out=noty);
    And16(a=y, b=noty, out=zeroy);
    Mux16(a=y, b=zeroy, sel=zy, out=muxout3);

    Not16(in=muxout3, out=neqzeromuxout2);
    Mux16(a=muxout3, b=neqzeromuxout2, sel=ny, out=muxout4);

    Add16(a=muxout2, b=muxout4, out=add1);
    And16(a=muxout2, b=muxout4, out=and1);
    Mux16(a=and1, b=add1, sel=f, out=muxout5);

    Not16(in=muxout5, out=notmuxout5); 
    Mux16(a=muxout5, b=notmuxout5, sel=no, out=muxfinalout);
    Mux16(a=muxout5, b=notmuxout5, sel=no, out[15]=muxfinalbitout);

    Or16(a=muxfinalout, b=false, out=out);

    Add16(a=muxfinalout, b=true, out[15]=zrout);
    Mux(a=false, b=true, sel=zrout, out=zrmuxout);
    Not(in=muxfinalbitout, out=muxoutfinalbitcheck);
    And(a=zrmuxout, b=muxoutfinalbitcheck, out=zr);

    Mux(a=false, b=true, sel=muxfinalbitout, out=ng);
}
